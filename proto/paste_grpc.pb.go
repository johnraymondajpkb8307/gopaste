// proto/paste.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/paste.proto

package paste

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PasteService_CreatePaste_FullMethodName = "/paste.PasteService/CreatePaste"
	PasteService_GetPaste_FullMethodName    = "/paste.PasteService/GetPaste"
)

// PasteServiceClient is the client API for PasteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasteServiceClient interface {
	CreatePaste(ctx context.Context, in *CreatePasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
	GetPaste(ctx context.Context, in *GetPasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
}

type pasteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasteServiceClient(cc grpc.ClientConnInterface) PasteServiceClient {
	return &pasteServiceClient{cc}
}

func (c *pasteServiceClient) CreatePaste(ctx context.Context, in *CreatePasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, PasteService_CreatePaste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteServiceClient) GetPaste(ctx context.Context, in *GetPasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, PasteService_GetPaste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasteServiceServer is the server API for PasteService service.
// All implementations must embed UnimplementedPasteServiceServer
// for forward compatibility.
type PasteServiceServer interface {
	CreatePaste(context.Context, *CreatePasteRequest) (*PasteResponse, error)
	GetPaste(context.Context, *GetPasteRequest) (*PasteResponse, error)
	mustEmbedUnimplementedPasteServiceServer()
}

// UnimplementedPasteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasteServiceServer struct{}

func (UnimplementedPasteServiceServer) CreatePaste(context.Context, *CreatePasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaste not implemented")
}
func (UnimplementedPasteServiceServer) GetPaste(context.Context, *GetPasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaste not implemented")
}
func (UnimplementedPasteServiceServer) mustEmbedUnimplementedPasteServiceServer() {}
func (UnimplementedPasteServiceServer) testEmbeddedByValue()                      {}

// UnsafePasteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasteServiceServer will
// result in compilation errors.
type UnsafePasteServiceServer interface {
	mustEmbedUnimplementedPasteServiceServer()
}

func RegisterPasteServiceServer(s grpc.ServiceRegistrar, srv PasteServiceServer) {
	// If the following call pancis, it indicates UnimplementedPasteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PasteService_ServiceDesc, srv)
}

func _PasteService_CreatePaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteServiceServer).CreatePaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteService_CreatePaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteServiceServer).CreatePaste(ctx, req.(*CreatePasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteService_GetPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteServiceServer).GetPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasteService_GetPaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteServiceServer).GetPaste(ctx, req.(*GetPasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasteService_ServiceDesc is the grpc.ServiceDesc for PasteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paste.PasteService",
	HandlerType: (*PasteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaste",
			Handler:    _PasteService_CreatePaste_Handler,
		},
		{
			MethodName: "GetPaste",
			Handler:    _PasteService_GetPaste_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/paste.proto",
}
